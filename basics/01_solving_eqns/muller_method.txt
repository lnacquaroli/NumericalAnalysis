"""
Muller method for solving f(x) = 0.
Okten, Nunmerical Aanalysis with julia

	sol = muller_method(f, p; ε=1.0e-6, k=10)

f: function
p: vector with p parameters, [p0, p1, p2]
ε: Stopping criteria
k: Number of iterations

sol: Solution
	x:    approximate solution
	iter: iterations run
"""
function muller_method(f, x; ε=1.0e-6, k=10)
	n = 1
	p = 0	
	while n <= k
		c = f(x[3])
		b1 = (x[1] - x[3])*(f(x[2]) - f(x[3]))/((x[2] - x[3])*(x[1] - p[2]))
		b2 = (p[2] - p[3])*(f(p[1]) - f(p[3]))/((p[1] - p[3])*(p[1] - p[2]))
		b = b1 - b2
		a1 = (f(p[1]) - f(p[3]))/((p[1] - p[3])*(p[1] - p[2]))
		a2 = (f(p[2]) - f(p[3]))/((p[2] - p[3])*(p[1] - p[2]))
		a = a1 - a2
		d = (Complex(b^2-4*a*c))^0.5
		if abs(b - d) < abs(b + d)
			inc = 2.0*c/(b + d)
		else
			inc = 2.0*c/(b - d)
		end
		q = p[3] - inc
		if f(q)==0 || abs(q - p[3]) < ε
			return println("q is $q and the iteration number is $n")
		end
		p[1] = p[2]
		p[2] = p[3]
		p[3] = q
		n += 1
	end
	y = f(p)
	println("Method did not converge. The last iteration gives $p with function value $y")
end